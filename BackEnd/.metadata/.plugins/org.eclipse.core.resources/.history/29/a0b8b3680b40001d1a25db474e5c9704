package com.careprovider.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.PostConstruct;

import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;

@Component
public class DiskStorageServiceImpl implements StorageService {

	private String BASEPATH;

	public DiskStorageServiceImpl(FileUploadProperties fileUploadProperties) {

		this.BASEPATH = Paths.get(fileUploadProperties.getLocation()).toAbsolutePath().normalize().toString();

	}

	@PostConstruct
	public void init() {
		// TODO Auto-generated method stub
		try {
			File file = new File(BASEPATH);
			System.err.println(BASEPATH);
			if (file.mkdirs()) {
				System.out.println("Directory created");
			}
		} catch (Exception ex) {
			System.err.println("Could not create upload dir! " + ex.getMessage());
		}
	}

	@Override
	public List<String> loadAll() {
		File dirPath = new File(BASEPATH);
		return Arrays.asList(dirPath.list());
	}

	@Override
	public String store(MultipartFile file) {

		try {
			System.out.println(file.getOriginalFilename());
			String ext = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));

			System.out.println(ext);
	//.jpg
			String fileName = UUID.randomUUID().toString().replaceAll("-", "") + ext;
	//asa3d7sda6sda78sa3.jpg
			System.out.println(UUID.randomUUID());
	//asa3d7sda6sda78sa3
			File filePath = new File(BASEPATH, fileName);
	//G:/server/uploads/asa3d7sda6sda78sa3.jpg
			try (FileOutputStream out = new FileOutputStream(filePath)) {

				FileCopyUtils.copy(file.getInputStream(), out);
				System.out.println("Reached here...!");

				return fileName;

			} catch (Exception e) {
				e.printStackTrace();
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Resource load(String fileName) {

		File filePath = new File(BASEPATH, fileName);///c:/server/uploads/filename
		if (filePath.exists())
			return new FileSystemResource(filePath);
		return null;
	}

	@Override
	public void delete(String fileName) {

		File filePath = new File(BASEPATH, fileName);
		if (filePath.exists())
			filePath.delete();
	}

}
/*
 * UUID class generally represents an immutable universally unique identifiers
 * 
 * A UUID represents a 128 bit value
 * 
 * uuid = <time_low>+<time_mid>+<time_high and version>+ <variant and sequence>
 * +<node>
 * 
 * 
 */
